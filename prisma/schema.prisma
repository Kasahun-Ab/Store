

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Employee {
  id               Int           @id @default(autoincrement())
  full_name        String        @db.VarChar(50)
  department_id    Int
  email            String        @unique
  phone            String?       @unique
  password         String
  role_id          Int       
  role             Role         @relation(fields: [role_id], references: [id])
  department       Department    @relation(fields: [department_id], references: [id])
  checked_by       Approvement[] @relation("ApprovementCheckedBy")
  received_by      Approvement[] @relation("ApprovementReceivedBy")
  prepared_by      Approvement[] @relation("ApprovementPreparedBy")
  headed_department Department?  @relation("DepartmentHead")

  Notification Notification[]
}

model Department {
  id                Int         @id @default(autoincrement())
  department_name   String
  department_head_id Int?       @unique
  department_head   Employee?   @relation("DepartmentHead", fields: [department_head_id], references: [id])
  employees         Employee[]
}

model Grn {
  id                      Int         @id @default(autoincrement())
  date                    DateTime    @db.Date
  supplier                String
  suppliers_inv_other_no  String
  store_location          String
  purchase_req_num        Int
  purchase_order_num      Int
  approvment_id           Int?
  total_id                Int?        @unique
  approvement             Approvement? @relation(fields: [approvment_id], references: [id])
  grn_items               GrnItem[]
  referance_scc           ReferanceScc[]
  total                   Total?      @relation(fields: [total_id], references: [id])
  Notification Notification[]
}

model GrnItem {
  id                  Int             @id @default(autoincrement())
  grn_id              Int
  ser_no              Int
  description         Int
  unit_measurement_id Int
  unit_measurement    UnitMeasurement @relation(fields: [unit_measurement_id], references: [id])
  qua_ordered         Int
  qua_delivered       Int
  quantity_received   Int
  unit_price          Float
  total_item_price    Float
  remark              String
  grn                 Grn             @relation(fields: [grn_id], references: [id])
  item                Item            @relation(fields: [description], references: [id])
}

model Total {
  id                  Int         @id @default(autoincrement())
  total_price         Float
  grn                 Grn?
  srn                 Srn?
  store_issue_voucher StoreIssueVoucher?
}

model Approvement {
  id                  Int         @id @default(autoincrement())
  prepared_by_id      Int ?
  checked_by_id       Int ?
  received_by_id      Int ?
  prepared_by         Employee ?    @relation("ApprovementPreparedBy", fields: [prepared_by_id], references: [id])
  checked_by          Employee ?    @relation("ApprovementCheckedBy", fields: [checked_by_id], references: [id])
  received_by         Employee ?    @relation("ApprovementReceivedBy", fields: [received_by_id], references: [id])
  grn                 Grn[]
  srn                 Srn[]
}

model Srn {
  id                  Int         @id @default(autoincrement())
  requisition_work_unit String
  date                DateTime    @db.Date
  approvment_id       Int?
  approvement         Approvement? @relation(fields: [approvment_id], references: [id])
  srn_items           SrnItem[]
  total_id            Int?        @unique
  total               Total?      @relation(fields: [total_id], references: [id])
  Notification Notification[]
}

model SrnItem {
  id                  Int             @id @default(autoincrement())
  srn_id              Int
  serial_num          Int
  description         String
  unit_measurement_id Int
  unit_measurement    UnitMeasurement @relation(fields: [unit_measurement_id], references: [id])
  quantity            Int
  remarks             String
  srn                 Srn             @relation(fields: [srn_id], references: [id])
  item                Item            @relation(fields: [description], references: [name])
}

model Scc {
  id                  Int         @id @default(autoincrement())
  item                String @unique
  location_shelves_no String
  max_stock_level     Int
  min_stock_level     Int
  item_details        Item        @relation(fields: [item], references: [name])
  referance_scc       ReferanceScc[]
}

model ReferanceScc {
  id                  Int         @id @default(autoincrement())
  scc_id              Int
  date                DateTime    @db.Date
  grn_id              Int?
  iv_id               Int?
  unit_measurement_id Int
  unit_measurement    UnitMeasurement @relation(fields: [unit_measurement_id], references: [id])
  stock_in_key        Int?
  stock_out_key       Int?
  stock_balance_key   Int?
  scc                 Scc         @relation(fields: [scc_id], references: [id])
  grn                 Grn?        @relation(fields: [grn_id], references: [id])
  siv                 Siv?        @relation(fields: [iv_id], references: [id])
  stock_in            StockIn[]
  stock_out           StockOut[]
  stock_balance       StockBalance[]
}

model StockIn {
  id                  Int         @id @default(autoincrement())
  quantity            Int
  ref_key             Int         @unique
  unit_price          Float
  total_price         Float
  referance_scc       ReferanceScc @relation(fields: [ref_key], references: [id])
}

model StockOut {
  id                  Int         @id @default(autoincrement())
  quantity            Int
  unit_price          Float
  total_price         Float
  ref_key             Int
  referance_scc       ReferanceScc @relation(fields: [ref_key], references: [id])
}

model StockBalance {
  id                  Int         @id @default(autoincrement())
  quantity            Int
  unit_price          Float
  total_price         Float
  ref_key             Int
  last_stock_balance  Boolean @default(true)
  referance_scc       ReferanceScc @relation(fields: [ref_key], references: [id])
}

model Siv {
  id                  Int         @id @default(autoincrement())
  issued_to           String
  date                DateTime    @db.Date
  store_req_num       Int
  siv_items           SivItem[]
  referance_scc       ReferanceScc[]
}

model SivItem {
  id                  Int             @id @default(autoincrement())
  siv_id              Int
  ser_num             Int
  description         String
  um                  Int
  requested           Int
  issued              Int
  outstock            Int
  unit_price          Float
  total_price         Float
  remark              String
  siv                 Siv             @relation(fields: [siv_id], references: [id])
  item                Item            @relation(fields: [description], references: [name])
}

model Item {
  id                  Int         @id @default(autoincrement())
  name                String      @unique
  unit_measurement_id Int
  unit_measurement    UnitMeasurement @relation(fields: [unit_measurement_id], references: [id])
  type_id             Int
  type                ItemType    @relation(fields: [type_id], references: [id])
  scc                 Scc[]
  siv_items           SivItem[]
  srn_items           SrnItem[]
  grn_items           GrnItem[]
  store_issue_voucher_items StoreIssueVoucherItem[]
}

model UnitMeasurement {
  id                  Int         @id @default(autoincrement())
  unit                String      @unique
  grn_items           GrnItem[]
  items               Item[]
  srn_items           SrnItem[]
  referance_scc       ReferanceScc[]
  store_issue_voucher_items StoreIssueVoucherItem[]
}

model ItemType {
  id                  Int         @id @default(autoincrement())
  type                String      @unique
  items               Item[]
}

model Role {
  id                  Int         @id @default(autoincrement())
  role                String      @unique
  employees           Employee[]
}

model StoreIssueVoucher {
  id                  Int         @id @default(autoincrement())
  issued_to           String
  store_req_no        Int
  total_id            Int?        @unique
  total               Total?      @relation(fields: [total_id], references: [id])
  date                DateTime    @db.Date

  StoreIssueVoucherItem StoreIssueVoucherItem[]
}

model StoreIssueVoucherItem {
  id                  Int         @id @default(autoincrement())
  description_id      Int
  description         Item        @relation(fields: [description_id], references: [id])
  unit_measurement_id Int
  unit_measurement    UnitMeasurement @relation(fields: [unit_measurement_id], references: [id])
  requested           Int
  issued              Int
  out_of_stock        Int
  unit_price          Float
  total_price         Float
  remark              String
  store_issue_key    Int 
  store_issue_voucher StoreIssueVoucher @relation(fields: [store_issue_key], references: [id])
}

model Notification {
  id                  Int         @id @default(autoincrement())
  message             String
  date                DateTime    @db.Date
  employee_id         Int 
  grn_id              Int ?
  srn_id              Int ?
  read        Boolean  @default(false)
  timestamp   DateTime @default(now())
  Grn                 Grn?        @relation(fields: [grn_id], references: [id])
  Srn                 Srn?        @relation(fields: [srn_id], references: [id])
  employee            Employee    @relation(fields: [employee_id], references: [id])
}